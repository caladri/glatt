root
`->mainbus
   `->mp
      `->mpcpu
         |->mpbus
	 |  |->tmfb
	 |  |->tmdisk
	 |  |  `-> disk
	 |  `->tmether
	 |     `-> netif
         `->cpu
            `->clock_r4k

Rewrite:
	2) Scheduler.  The current stuff seems too convoluted?

o) Device/bus methods for resource management.
	o) Interrupt reservation.
	o) DMA
o) Hints and static configuration sorts of things.

This single-image thing seems kind of problematic.  Next up needs to be an
asymmetric rewrite, I think, with each CPU having its own data structures and
them having to do inter-host IPC.

Should just create an ipc_process thread at STARTUP_MAIN:STARTUP_BEFORE, rather
than having the startup thread become ipc_process, but that requires per-cpu
startup items.

Is there a problem with vm_map_page?  There was something like memory corruption
when it was used in page_lookup, but was that all there was to it?  Is core_pool
at risk (it uses it for POOL_VIRTUAL pools)!?

Urgent:

Ad infinitum: Keep going over code and restructuring to make less ugly and
hokey and hard to maintain.

o) VM.
	o) Better physical page data structures.
	o) Virtual page data structures.
	o) Cleanup pmap and friends.
	o) Locking.
	o) IPC.
	o) Userland.
	o) Allocate multiple contiguous physical pages.
o) Exceptions.
	o) Be careful to make correct use of EXL and ERL.  Without it, I am
	   leaving open a race where I can take an interrupt at 'eret' and then
	   when the exception pc is trashed, that eret will return to itself ad
	   absurdum.
	o) I think I'd like to rewrite it all with EXL and ERL in mind.  Might
	   be nice to wire the kernel stack, mark it dirty on insert, and start
	   using that as a place to store random crap.  Or use $gp as an
	   exception frame thing?
o) Tasks.
	o) Task switching.
		o) Userland.
	o) Threads.
		o) Userland.
	o) Userland.
o) Clocks.
	o) Scheduling.
o) Locking.
o) IPC.
	o) Userland.
	o) CRUX system for renaming ports in a task.  For example mapping the
	   system port to a user port for emulation.  Such as:
	   	crux(IPC_PORT_SYSTEM, 1024);
		ipc_port_listen(1024);
		fd = open(name);
		ipc_port_receive(1024);
		/* fake open */
		crux_teardown(IPC_PORT_SYSTEM);
		/* real open */
o) Device drivers.
	o) Ethernet.
		o) IP.
			o) Arp.
			o) Multicast.
				o) IPC.
			o) IPC.
			o) Userland.
		o) IPC.
	o) Clock calibration.
