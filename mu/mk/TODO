Ad infinitum: Keep going over code and restructuring to make less ugly and
hokey and hard to maintain.

o) Scheduler.
	o) Debug.
o) VM.
	o) Better physical page data structures.
	o) Virtual page data structures.
	o) Cleanup pmap and friends.
	o) Locking.
	o) IPC.
	o) Userland.
	o) Allocate multiple contiguous physical pages.
o) Exceptions.
	o) Prevent nesting/corruption of the frame.
		o) Make everything use KERNEL_STATUS on exception entry.
o) Tasks.
	o) Task switching.
		o) Better status register management.  Use the kernel one with
		   modifications to set the userland status.  Keep the kernel
		   one in the PCPU data and switch to it whenever switching to
		   a kernel task.  Status is not a thread state.  Cannot have a
		   task with userland and kernel threads, or 32 and 64-bit
		   threads.  That's just silly.
			o) Have some way of tracking when exceptions came from
			   user threads so that we can restore the correct
			   status, or make the thread contain a partial status
			   register.  Saving and restoring a status register
			   based on what's written to it *sucks*.
			   Probably nothing should directly touch the status
			   register.
		o) Userland.
	o) Threads.
		o) Userland.
	o) Userland.
o) Clocks.
	o) Scheduling.
o) Locking.
o) IPC.
	o) Userland.
o) Device drivers.
	o) device_get_child_unit(device->d_parent, device) OR
	   driver_get_unit(device) ?  Use it instead of %s.%p in the debugger
	   dump.  Use it for named device lookup.
	o) Ethernet.
		o) IP.
			o) Arp.
			o) Multicast.
				o) IPC.
			o) IPC.
			o) Userland.
		o) IPC.
	o) Clock calibration.
